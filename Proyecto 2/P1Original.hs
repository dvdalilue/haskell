{- |
     Implementacion de una estructura Pixels,
     que representa los carectares de la tabla ASCII
-}

module P1Original (
    -- * El tipo @Pixels@
  Pixels,
  
  -- * Operacion de tipografia desde mapa de bits
  font, fontBitmap,

  -- * Operaciones para mostrar pixels por pantalla  
  pixelsToString, pixelListToPixels, pixelListToString,
  
  -- * Operaciones para combinar pixels
  concatPixels, messageToPixels,
  
  -- * Operaciones para efectos especiales
  up, down, left, right,upsideDown, backwards, negative,
  
  pixelate
  
  ) where

import Data.List

-- | Tipo de datos para Pixels
type Pixels = [String]

-- | Mapa de bits para 'font'
fontBitmap =
  [
    [ 0x00, 0x00, 0x00, 0x00, 0x00 ], --  (space)
    [ 0x00, 0x00, 0x5F, 0x00, 0x00 ], --  !
    [ 0x00, 0x07, 0x00, 0x07, 0x00 ], --  "
    [ 0x14, 0x7F, 0x14, 0x7F, 0x14 ], --  #
    [ 0x24, 0x2A, 0x7F, 0x2A, 0x12 ], --  $
    [ 0x23, 0x13, 0x08, 0x64, 0x62 ], --  %
    [ 0x36, 0x49, 0x55, 0x22, 0x50 ], --  &
    [ 0x00, 0x05, 0x03, 0x00, 0x00 ], --  '
    [ 0x00, 0x1C, 0x22, 0x41, 0x00 ], --  (
    [ 0x00, 0x41, 0x22, 0x1C, 0x00 ], --  )
    [ 0x08, 0x2A, 0x1C, 0x2A, 0x08 ], --  *
    [ 0x08, 0x08, 0x3E, 0x08, 0x08 ], --  +
    [ 0x00, 0x50, 0x30, 0x00, 0x00 ], --  ,
    [ 0x08, 0x08, 0x08, 0x08, 0x08 ], --  -
    [ 0x00, 0x60, 0x60, 0x00, 0x00 ], --  .
    [ 0x20, 0x10, 0x08, 0x04, 0x02 ], --  /
    [ 0x3E, 0x51, 0x49, 0x45, 0x3E ], --  0
    [ 0x00, 0x42, 0x7F, 0x40, 0x00 ], --  1
    [ 0x42, 0x61, 0x51, 0x49, 0x46 ], --  2
    [ 0x21, 0x41, 0x45, 0x4B, 0x31 ], --  3
    [ 0x18, 0x14, 0x12, 0x7F, 0x10 ], --  4
    [ 0x27, 0x45, 0x45, 0x45, 0x39 ], --  5
    [ 0x3C, 0x4A, 0x49, 0x49, 0x30 ], --  6
    [ 0x01, 0x71, 0x09, 0x05, 0x03 ], --  7
    [ 0x36, 0x49, 0x49, 0x49, 0x36 ], --  8
    [ 0x06, 0x49, 0x49, 0x29, 0x1E ], --  9
    [ 0x00, 0x36, 0x36, 0x00, 0x00 ], --  :
    [ 0x00, 0x56, 0x36, 0x00, 0x00 ], --  ;
    [ 0x00, 0x08, 0x14, 0x22, 0x41 ], --  <
    [ 0x14, 0x14, 0x14, 0x14, 0x14 ], --  =
    [ 0x41, 0x22, 0x14, 0x08, 0x00 ], --  >
    [ 0x02, 0x01, 0x51, 0x09, 0x06 ], --  ?
    [ 0x32, 0x49, 0x79, 0x41, 0x3E ], --  @
    [ 0x7E, 0x11, 0x11, 0x11, 0x7E ], --  A
    [ 0x7F, 0x49, 0x49, 0x49, 0x36 ], --  B
    [ 0x3E, 0x41, 0x41, 0x41, 0x22 ], --  C
    [ 0x7F, 0x41, 0x41, 0x22, 0x1C ], --  D
    [ 0x7F, 0x49, 0x49, 0x49, 0x41 ], --  E
    [ 0x7F, 0x09, 0x09, 0x01, 0x01 ], --  F
    [ 0x3E, 0x41, 0x41, 0x51, 0x32 ], --  G
    [ 0x7F, 0x08, 0x08, 0x08, 0x7F ], --  H
    [ 0x00, 0x41, 0x7F, 0x41, 0x00 ], --  I
    [ 0x20, 0x40, 0x41, 0x3F, 0x01 ], --  J
    [ 0x7F, 0x08, 0x14, 0x22, 0x41 ], --  K
    [ 0x7F, 0x40, 0x40, 0x40, 0x40 ], --  L
    [ 0x7F, 0x02, 0x04, 0x02, 0x7F ], --  M
    [ 0x7F, 0x04, 0x08, 0x10, 0x7F ], --  N
    [ 0x3E, 0x41, 0x41, 0x41, 0x3E ], --  O
    [ 0x7F, 0x09, 0x09, 0x09, 0x06 ], --  P
    [ 0x3E, 0x41, 0x51, 0x21, 0x5E ], --  Q
    [ 0x7F, 0x09, 0x19, 0x29, 0x46 ], --  R
    [ 0x46, 0x49, 0x49, 0x49, 0x31 ], --  S
    [ 0x01, 0x01, 0x7F, 0x01, 0x01 ], --  T
    [ 0x3F, 0x40, 0x40, 0x40, 0x3F ], --  U
    [ 0x1F, 0x20, 0x40, 0x20, 0x1F ], --  V
    [ 0x7F, 0x20, 0x18, 0x20, 0x7F ], --  W
    [ 0x63, 0x14, 0x08, 0x14, 0x63 ], --  X
    [ 0x03, 0x04, 0x78, 0x04, 0x03 ], --  Y
    [ 0x61, 0x51, 0x49, 0x45, 0x43 ], --  Z
    [ 0x00, 0x00, 0x7F, 0x41, 0x41 ], --  [
    [ 0x02, 0x04, 0x08, 0x10, 0x20 ], --  \
    [ 0x41, 0x41, 0x7F, 0x00, 0x00 ], --  ]
    [ 0x04, 0x02, 0x01, 0x02, 0x04 ], --  ^
    [ 0x40, 0x40, 0x40, 0x40, 0x40 ], --  _
    [ 0x00, 0x01, 0x02, 0x04, 0x00 ], --  `
    [ 0x20, 0x54, 0x54, 0x54, 0x78 ], --  a
    [ 0x7F, 0x48, 0x44, 0x44, 0x38 ], --  b
    [ 0x38, 0x44, 0x44, 0x44, 0x20 ], --  c
    [ 0x38, 0x44, 0x44, 0x48, 0x7F ], --  d
    [ 0x38, 0x54, 0x54, 0x54, 0x18 ], --  e
    [ 0x08, 0x7E, 0x09, 0x01, 0x02 ], --  f
    [ 0x08, 0x14, 0x54, 0x54, 0x3C ], --  g
    [ 0x7F, 0x08, 0x04, 0x04, 0x78 ], --  h
    [ 0x00, 0x44, 0x7D, 0x40, 0x00 ], --  i
    [ 0x20, 0x40, 0x44, 0x3D, 0x00 ], --  j
    [ 0x00, 0x7F, 0x10, 0x28, 0x44 ], --  k
    [ 0x00, 0x41, 0x7F, 0x40, 0x00 ], --  l
    [ 0x7C, 0x04, 0x18, 0x04, 0x78 ], --  m
    [ 0x7C, 0x08, 0x04, 0x04, 0x78 ], --  n
    [ 0x38, 0x44, 0x44, 0x44, 0x38 ], --  o
    [ 0x7C, 0x14, 0x14, 0x14, 0x08 ], --  p
    [ 0x08, 0x14, 0x14, 0x18, 0x7C ], --  q
    [ 0x7C, 0x08, 0x04, 0x04, 0x08 ], --  r
    [ 0x48, 0x54, 0x54, 0x54, 0x20 ], --  s
    [ 0x04, 0x3F, 0x44, 0x40, 0x20 ], --  t
    [ 0x3C, 0x40, 0x40, 0x20, 0x7C ], --  u
    [ 0x1C, 0x20, 0x40, 0x20, 0x1C ], --  v
    [ 0x3C, 0x40, 0x30, 0x40, 0x3C ], --  w
    [ 0x44, 0x28, 0x10, 0x28, 0x44 ], --  x
    [ 0x0C, 0x50, 0x50, 0x50, 0x3C ], --  y
    [ 0x44, 0x64, 0x54, 0x4C, 0x44 ], --  z
    [ 0x00, 0x08, 0x36, 0x41, 0x00 ], --  {
    [ 0x00, 0x00, 0x7F, 0x00, 0x00 ], --  |
    [ 0x00, 0x41, 0x36, 0x08, 0x00 ]  --  }
  ]

-- | 'font' permite obtener representacion en pixels de un 
-- caracter particular del alfabeto
font :: Char -> Pixels
font c = pixelate (fontBitmap !! (fromEnum c - 32)) 7 []

pixelate xs count ans
  | count == 0 = reverse ans
  | otherwise = pixelate (map (`div `2) xs) (count - 1)
                          ( (map (\c -> if c `mod `2 == 1 then '*' else ' ') xs)
                            : ans)

-- | Imprime el Pixels como una pila, para su visualizacion
printStackPixels :: Pixels -> IO()
printStackPixels x = mapM_ print x

-- | 'pixelsToString' convierte de tipo 'Pixels' a tipo String
pixelsToString :: Pixels -> String
                  -- ^ String devuelto es el resultado de combinar
                  -- elementos del 'Pixels' con retorno de carro
                  -- en medio.
pixelsToString [] = []
pixelsToString p  = init $ unlines p

-- | 'pixelListToPixels' convierte una lista de 'Pixels' en un 'Pixels' 
-- que los agrupa a todos
pixelListToPixels :: [Pixels] -> Pixels
                     -- ^ 'Pixels' devuelto es el resultado de combinar
                     -- cada 'Pixels' de la lista original
                     -- con una cadena vacia entre ambas.
pixelListToPixels [] = []
pixelListToPixels ps = concat $ intersperse [""] ps


-- | 'pixelListToString' convierte una lista de 'Pixels' en un String
pixelListToString :: [Pixels] -> String
                     -- ^ String devuelto es el resultado de combinar
                     -- cada elemento de la lista original convertido
                     -- a String con retornos de carro en medio.
pixelListToString [] = []
pixelListToString ps = concat $ intersperse [toEnum 13] (map pixelsToString ps)

-- | 'concatPixels' representa la concatenacion horizontal de los elementos
-- de la lista original
concatPixels :: [Pixels] -> Pixels
concatPixels (p:ps) = foldl mergePixels p ps
  where mergePixels a b = map (\ps ->  (fst ps) ++ (snd ps)) $ zip a b 


-- | 'messageToPixels' convierte una cadena de caracteres en un 'Pixels'
-- agregando un espacio en blanco entre caracteres
messageToPixels :: String -> Pixels
messageToPixels s = concatPixels $ intersperse [" "," "," "," "," "," "," "]
                    $ map font s

-- | 'up' dezplaza una hilera hacia arriba
up :: Pixels -> Pixels
up wrd = tail wrd ++ [head wrd]
   
-- | 'down' dezplaza una hilera hacia abajo
down :: Pixels -> Pixels
down wrd = last wrd : init wrd

-- | 'left' dezplaza una columna hacia la izquierda.
left :: Pixels -> Pixels
left wrd = [ tail x ++ [head x] | x <- wrd ]

-- | 'right' dezplaza una columna hacia la derecha.
right :: Pixels -> Pixels
right wrd = [ last x : init x | x <- wrd ]

-- | 'upsideDown' invierte el orden de las filas.
upsideDown :: Pixels -> Pixels
upsideDown wrd = tail wrd ++ [head wrd]

-- | 'backwards' invierte el orden de las columnas.
backwards :: Pixels -> Pixels
backwards wrd = map reverse wrd

-- | 'negative' intercambia blancos por astericos y viceversa.  
negative :: Pixels -> Pixels
negative wrd = [ [ if y=='*' then ' ' else '*' | y<-x ] | x<-wrd ]
